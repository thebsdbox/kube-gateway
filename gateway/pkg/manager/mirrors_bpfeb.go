// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package manager

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type mirrorsConfig struct {
	ProxyAddr uint32
	ProxyPort uint16
	_         [2]byte
	ProxyPid  uint64
	Network   uint32
	Mask      uint16
	Debug     uint8
	Tunnel    uint8
}

type mirrorsSocket struct {
	SrcAddr uint32
	SrcPort uint16
	_       [2]byte
	DstAddr uint32
	DstPort uint16
	_       [2]byte
}

// loadMirrors returns the embedded CollectionSpec for mirrors.
func loadMirrors() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MirrorsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load mirrors: %w", err)
	}

	return spec, err
}

// loadMirrorsObjects loads mirrors and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*mirrorsObjects
//	*mirrorsPrograms
//	*mirrorsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMirrorsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMirrors()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// mirrorsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mirrorsSpecs struct {
	mirrorsProgramSpecs
	mirrorsMapSpecs
}

// mirrorsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mirrorsProgramSpecs struct {
	CgConnect4 *ebpf.ProgramSpec `ebpf:"cg_connect4"`
	CgSockOps  *ebpf.ProgramSpec `ebpf:"cg_sock_ops"`
	CgSockOpt  *ebpf.ProgramSpec `ebpf:"cg_sock_opt"`
}

// mirrorsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type mirrorsMapSpecs struct {
	MapConfig *ebpf.MapSpec `ebpf:"map_config"`
	MapPorts  *ebpf.MapSpec `ebpf:"map_ports"`
	MapSocks  *ebpf.MapSpec `ebpf:"map_socks"`
}

// mirrorsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMirrorsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mirrorsObjects struct {
	mirrorsPrograms
	mirrorsMaps
}

func (o *mirrorsObjects) Close() error {
	return _MirrorsClose(
		&o.mirrorsPrograms,
		&o.mirrorsMaps,
	)
}

// mirrorsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMirrorsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mirrorsMaps struct {
	MapConfig *ebpf.Map `ebpf:"map_config"`
	MapPorts  *ebpf.Map `ebpf:"map_ports"`
	MapSocks  *ebpf.Map `ebpf:"map_socks"`
}

func (m *mirrorsMaps) Close() error {
	return _MirrorsClose(
		m.MapConfig,
		m.MapPorts,
		m.MapSocks,
	)
}

// mirrorsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMirrorsObjects or ebpf.CollectionSpec.LoadAndAssign.
type mirrorsPrograms struct {
	CgConnect4 *ebpf.Program `ebpf:"cg_connect4"`
	CgSockOps  *ebpf.Program `ebpf:"cg_sock_ops"`
	CgSockOpt  *ebpf.Program `ebpf:"cg_sock_opt"`
}

func (p *mirrorsPrograms) Close() error {
	return _MirrorsClose(
		p.CgConnect4,
		p.CgSockOps,
		p.CgSockOpt,
	)
}

func _MirrorsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed mirrors_bpfeb.o
var _MirrorsBytes []byte
